RUTAS DEL BACKEND:

/checkout
POST "/"  req.body = {id, amount, email}; 
GET "/balance"  retorna un arreglo de donaciones.


/visitor
GET "/addVisitor"  Ruta para sumar instancias de "visitor".
GET "/numberVisitors"  Retorna un número:string de la cantidad de instancias de visitors.


/users
GET "/numberOfUsersInDB"  Retorna un número:string de cantidad de Users guardados en la DB.
GET "/contactinfo/:petid"   Retorna un objeto IContactInfoOfOwner con algunos datos del dueño de la mascota.
POST "/getallpetsofuser" req.body = {id: id del usuario};  Retorna arreglo de mascotas que le pertenecen al UserId que se envió por req.body.id .
DELETE "/deletepet/:petid"    req.body {petid: id de la mascot a borrar, id: id del User dueño de la mascota};  Borra una mascota.
POST "/newuser"   req.body = { email, name, city, contact, image, id };
POST "/exists"    req.body = {id};    Retorna {msg: true/false};
PUT "/update"     req.body = {image, contact,city,email,name,id};   Ruta para actualizar los datos de un usuario. 
POST "/someUserInfo"    req.body = {id};    Devuelve cierta información de un usuario (id).  someUserInfo:  {name, city, image, contact};


/pets
POST "/postnewpet"  req.body = {user: {id: idDelUser} , pet: {obj de new pet} ; Ruta para crear una nueva mascota, asociada a un user id. 

PUT "/update"     req.body = 
{
user: {userId: idDelUser}, 
pet: {id, name, specie, race, city, age, gender, status, vaccinationSchemeStatus, image, comments}
}

GET "/numberofpetsindb"     Retorna un número:string de la cantidad de pets en la DB.
GET "/especies"     Retorna un arreglo con las especies typadas para la prop "specie".
GET "/"     Retorna un arreglo de todas las mascotas en la DB.
GET "/perros"  Retorna un arreglo de todos los perros en la DB.
GET "/gatos" Retorna un arreglo de todos los gatos en la DB.
GET "/otra" Retorna un arreglo de todas las otras mascotas de especie "otra especie".
GET "/perdido" Retorna un arreglo de todas las mascotas con status "perdido".
GET "/encontrado" Retorna una arreglo de todas las mascotas con status "encontrado".
GET "/adopcion" Retorna un arreglo de todas las masctoas con status "en adopción".
GET  "/search"    req.query.input Hace un getAllBy(input) para buscar las mascotas q matcheen ese input
GET "/:id"    req.params.id     Busca una mascota por id. Retorna la instancia encontrada por id.


/users
 GET "/numberOfUsersInDB"     Retorna número:string de la cantidad de Users guardados en la DB.
 GET "/contactinfo/:petid"      Recibe por params el id de una mascota. Retorna un objeto con cierta información del usuario dueño de la mascota con id :petid.  {name, email, city, image, contact}
 POST "getAllPetsOfUser"    req.body = {id}     Recibe por body el id del User. Retorna un arreglo de Pets ascociadas al UserId. 
 DELETE "/deletepet/:petid"  req.body = {petid: idDeLaMascota, id: IdDelUserDueñoDeLaMascota}   Hace un soft destroy de una mascota con el id pasado por params y valida el id del usuario ascociado a esa mascota.
POST "/newuser"     req.body {email, name, contact, image, id}. Crea un nuevo User con las propiedades pasadas por body, si es que no existía previamente.
POST "/exists"      req.body {id: idDelUser};   Retorna un objeto {msg: true/false} dependiendo si existe un User con ese id en la DB.
PUT "/update"       req.body = {id, image, contact, city, email, name}    Actualiza los datos de un usuario con los datos pasados por el body.
POST "/someUserInfo"      req.body = {id};     Retorna un objeto con cierta información de un User {name, city, image, contact}


 TEMPORAL PORQUE HAY QUE ELIMINARLA: 
 GET "/"    Retorna un arreglo de todas las instancias de Users en la DB.
